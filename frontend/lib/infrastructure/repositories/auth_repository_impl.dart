import 'package:dartz/dartz.dart';
import '../../core/errors/failures.dart';
import '../../../domain/repositories/auth_repository.dart';
import '../../../domain/entities/user_entity.dart';
import '../../core/utils/SaveJWT.dart';
import '../datasources/local/auth_local.dart';
import '../datasources/remote/auth_remote.dart';
import '../models/user_model.dart';

class AuthRepositoryImpl implements AuthRepository {
  final AuthLocal authLocal;
  final AuthRemote authRemote;

  AuthRepositoryImpl(this.authLocal, this.authRemote);

  @override
  Future<Either<Failure, void>> register(String name, String email, String password) async {
    try {
      final user = UserModel(
        id: "", // ID is generated by the API
        name: name,
        email: email,
        role: "user",
        password: password,
        profilePicture: '',
        token: '',
      );
      await authRemote.registerUser(user);
      await authLocal.saveUser(user);

      print("Registration completed successfully!");
      return const Right(null);
    } catch (e) {
      print("Registration Error: ${e.toString()}");  // ✅ Debug errors
      return Left(Failure.serverFailure(e.toString()));
    }
  }

  @override
  Future<Either<Failure, UserEntity>> login(String email, String password) async {
    try {
      print("Attempting remote login for email: $email");

      final userModel = await authRemote.login(email, password);

      if (userModel != null) {
        print("Remote login successful! Received user data: ${userModel.toMap()}");

        await saveJWT(userModel.token);
        return Right(UserEntity(
          id: userModel.id,
          name: userModel.name,
          email: userModel.email,
          role: userModel.role,
          profilePicture: userModel.profilePicture,
          token: userModel.token,
        ));
      } else {
        print("Login failed: Invalid email or password");
        return Left(Failure.authFailure("Invalid email or password"));
      }
    } catch (e) {
      print("Exception occurred during login: ${e.toString()}");
      return Left(Failure.serverFailure(e.toString()));
    }
  }
  @override
  Future<bool> deleteAccount() async {
    try {
      final token = await getJWT(); // ✅ Retrieve stored authentication token
      if (token == null) {
        print("❌ No valid token found for account deletion.");
        return false;
      }

      return await authRemote.deleteAccount(token); // ✅ Fix: Use `authRemote`
    } catch (e) {
      print("❌ Error in AuthRepository while deleting account: $e");
      return false;
    }
  }

  @override
  Future<bool> logout() async {
    try {
      final token = await getJWT();
      if (token == null) {
        print("❌ No valid token found for logout.");
        return false;
      }

      final success = await authRemote.logout(token); // ✅ Pass token to remote logout
      if (success) {
        await clearJWT(); // ✅ Clear token on successful logout
      }

      return success;
    } catch (e) {
      print("❌ Error in AuthRepository while logging out: $e");
      return false;
    }
  }





}