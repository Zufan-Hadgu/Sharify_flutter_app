// Mocks generated by Mockito 5.4.6 from annotations
// in sharify_flutter_app/test/infrastructure/item_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sharify_flutter_app/infrastructure/datasources/local/item_local.dart'
    as _i7;
import 'package:sharify_flutter_app/infrastructure/datasources/remote/item_remote.dart'
    as _i4;
import 'package:sharify_flutter_app/infrastructure/models/Item_model.dart'
    as _i6;
import 'package:sqflite/sqflite.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabase_1 extends _i1.SmartFake implements _i3.Database {
  _FakeDatabase_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ItemRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockItemRemoteDataSource extends _i1.Mock
    implements _i4.ItemRemoteDataSource {
  MockItemRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio =>
      (super.noSuchMethod(
            Invocation.getter(#dio),
            returnValue: _FakeDio_0(this, Invocation.getter(#dio)),
          )
          as _i2.Dio);

  @override
  _i5.Future<List<_i6.ItemModel>> fetchItems() =>
      (super.noSuchMethod(
            Invocation.method(#fetchItems, []),
            returnValue: _i5.Future<List<_i6.ItemModel>>.value(
              <_i6.ItemModel>[],
            ),
          )
          as _i5.Future<List<_i6.ItemModel>>);

  @override
  _i5.Future<bool> borrowItem(String? itemId, String? token) =>
      (super.noSuchMethod(
            Invocation.method(#borrowItem, [itemId, token]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<List<_i6.ItemModel>> fetchBorrowedItems() =>
      (super.noSuchMethod(
            Invocation.method(#fetchBorrowedItems, []),
            returnValue: _i5.Future<List<_i6.ItemModel>>.value(
              <_i6.ItemModel>[],
            ),
          )
          as _i5.Future<List<_i6.ItemModel>>);

  @override
  _i5.Future<bool> updateNote(String? itemId, String? note, String? token) =>
      (super.noSuchMethod(
            Invocation.method(#updateNote, [itemId, note, token]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> removeBorrowedItem(String? itemId, String? token) =>
      (super.noSuchMethod(
            Invocation.method(#removeBorrowedItem, [itemId, token]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);
}

/// A class which mocks [ItemLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockItemLocalDataSource extends _i1.Mock
    implements _i7.ItemLocalDataSource {
  MockItemLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Database> get db =>
      (super.noSuchMethod(
            Invocation.getter(#db),
            returnValue: _i5.Future<_i3.Database>.value(
              _FakeDatabase_1(this, Invocation.getter(#db)),
            ),
          )
          as _i5.Future<_i3.Database>);

  @override
  _i5.Future<void> cacheItems(List<_i6.ItemModel>? items) =>
      (super.noSuchMethod(
            Invocation.method(#cacheItems, [items]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<_i6.ItemModel>> getCachedItems() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedItems, []),
            returnValue: _i5.Future<List<_i6.ItemModel>>.value(
              <_i6.ItemModel>[],
            ),
          )
          as _i5.Future<List<_i6.ItemModel>>);

  @override
  _i5.Future<_i6.ItemModel?> getItemById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getItemById, [id]),
            returnValue: _i5.Future<_i6.ItemModel?>.value(),
          )
          as _i5.Future<_i6.ItemModel?>);

  @override
  _i5.Future<void> borrowItemLocally(String? itemId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#borrowItemLocally, [itemId, userId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
